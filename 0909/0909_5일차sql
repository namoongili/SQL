-- join 복습
-- 복습
select * from tbl_test_order;
select * from tbl_test_goods;
select * from tbl_test_customers;

-- 조회, 그룹화 복습
select * from member_tbl_11;

select m_grade, m_point from member_tbl_11;

--having 
select m_grade, sum(m_point)
from member_tbl_11
group by m_grade
having sum(m_point) >= 5000;

--group by와 having 의 작성순서가 바뀌어도 정상적으로 조회됨
select m_grade, sum(m_point)
from member_tbl_11
having sum(m_point) >= 5000
group by m_grade;

-- 
select * from tbl_test_order;
select * from tbl_test_goods;
select * from tbl_test_customers;

-- 주문일자
select o.ocode, g.pname, o.sale_cnt
from tbl_test_order o
join tbl_test_goods g
on o.pcode = g.pcode;

-- 주문일자별 상품별 판매수량합계
select o.odate, g.pname, sum(o.sale_cnt)
from tbl_test_order o
join tbl_test_goods g
on o.pcode = g.pcode
group by o.odate, g.pname;

--join (inner 조인, inner 생략가능)
select * 
from tbl_test_order o
inner join tbl_test_customer c
on o.id = c.id;

-- outer 조인
select *
from tbl_test_order o
right outer join tbl_test_customer c
on o.id = c.id;

select *
from tbl_test_order o
full outer join tbl_test_customer c
on o.id = c.id;


-- non equi 조인
-- non_Equi 조인
-- non_Equi join : 비등가조인 (

select * from customer;
select * from gift;

select *
from customer c 
join gift g
on c.point between g.g_start and g.g_end;

select *
from customer c
join gift g
on c.point >= g.g_start and c.point <= g.g_end;

select *
from customer c
join gift g
on c.point >= g.g_start and c.point <= g.g_end;


select * from score;
select * from hakjum;

-- 학점별 학생 수 구하기
select h.grade, count (*)
from score s
join hakjum h
on s.total between h.min_point and h.max_point
group by h.grade;

-- 연습문제 1
select *
from student;

select *
from department;


--2
select * from emp2;
select * from p_grade;

-- inner 조인 해당하는
select * 
from emp2 e
join p_grade p
on e.position = p.position;

--
select * from p_grade;
select * from emp2;

select e.name, trunc((sysdate - birthday) / 365,0 ) as "age" , e.position, g.position
from emp2 e
join p_grade p
on trunc((sysdate - birthday) / 365,0 ) between p.s_age and p.e_age;    

-----
CREATE TABLE t_emp
(
eid VARCHAR2(13) NOT NULL PRIMARY KEY ,
ename VARCHAR2(20) ,
salary NUMBER(5) ,
deptno NUMBER(5) ,
comm NUMBER(5) 
);
COMMIT;
INSERT INTO t_emp VALUES ('e001' , '신동엽' , 280,10,100) ;
INSERT INTO t_emp VALUES ('e002' , '유재석' , 250,20,50) ;
INSERT INTO t_emp VALUES ('e003' , '전현무' , 190,30,0) ;
INSERT INTO t_emp VALUES ('e004' , '양세영' , 300,20,0) ;
INSERT INTO t_emp VALUES ('e005' , '양세찬' , 290,40,100) ;
CREATE TABLE t_dept
(
deptno NUMBER(5) NOT NULL PRIMARY KEY ,
dname VARCHAR2(20) 
);
COMMIT;
INSERT INTO t_dept VALUES (10 , '영업팀') ;
INSERT INTO t_dept VALUES (20 , '기획팀') ;
INSERT INTO t_dept VALUES (30 , '관리팀') ;
INSERT INTO t_dept VALUES (40 , '마케팅팀') ;
INSERT INTO t_dept VALUES (50 , '재무팀') ;

commit;

select * from t_emp;

select salary from t_emp
where ename = '신동엽';

select *
from t_emp
where salary > 280;

--서브쿼리를 활용해서 신동엽보다 급여가 많은 사람 조회하기

select *
from t_emp
where salary > 
    (select salary from t_emp
     where ename = '신동엽' );

select *
from t_emp
where deptno in('10', '20');

select deptno from t_dept
where dname = '기획팀' or dname = '마케팅팀';

-- 부서가 기획팀이거나 마케팅팀인 사원을 조회
select *
from t_emp
where deptno in( select deptno from t_dept
                where dname = '기획팀' or dname = '마케팅팀');
       
-- where 절의 서브쿼리 (단일행, 다중행)         

-- from 절의 서브쿼리 (인라인뷰 서브쿼리)

select deptno, salary
from t_emp;

select *
from (
    select deptno, salary
    from t_emp
    )e
join t_dept d
on e.deptno = d.deptno;

-- 에이콘몰 고객별 판매금액 구하기
select * from tbl_test_order;
select * from tbl_test_goods;
select * from tbl_test_customer;

select c.name, sum( o.sale_cnt * g.price)
from tbl_test_order o
join tbl_test_goods g
on o.pcode = g.pcode
join tbl_test_customer c
on o.id = c.id
group by c.name;

select c.name, to_char( sum( o.sale_cnt * g.price), '999.999') as "amout"
from tbl_test_order o
join tbl_test_goods g
on o.pcode = g.pcode
join tbl_test_customer c
on o.id = c.id
group by c.name
order by 2 desc;

-- 서브쿼리를 활용해서 에이콘몰 고객별 판매금액
-- 주문 + 상품 => 고객별(고객아이디) 판매금액 구하기
-- 위의 쿼리내용과 고객테이블 조인해서 쿼리를 완성하겠다

--고객별 ( 고객아이디 ) 판매금액
select o.id, sum( o.sale_cnt * g.price )
from tbl_test_order o
join tbl_test_goods g
on o.pcode = g.pcode
group by o.id;

-- 고객 (이름)별 판매금액
select c.name, a.amount
from(
    select o.id, sum( o.sale_cnt * g.price ) as amount  
from tbl_test_order o
join tbl_test_goods g
on o.pcode = g.pcode
group by o.id
) a
join tbl_test_customer c
on a.id = c.id;

--where절에서 다중행일 때 >=ANY, >= ALL (ANY: 어느거라도 만족하면, 한 개라도 만족하면 조회대상), ALL : 모두 만족해야 조회대상이 됨
select * from emp;

select ename, sal
from emp
where sal >= ALL(
        select sal
        from emp
        where deptno = 20
);


--exists : 서브쿼리의 결과가 한건이라도 존재하느냐에 따라 메인쿼리의 실행여부가 결정된다
select * from emp;

-- 서브쿼리의 내용이 존재하는 경우
select ename, sal
from emp
where exists ( 
    select empno
    from emp
    where deptno = '20'
);

-- 서브쿼리 내용이 존재하지 않는 경우 메인쿼리가 실행되지 않는다
select ename, sal
from emp
where exists (
select empno
from emp
where deptno = '60'
);

-- 뷰만들기
-- 기존의 테이블로부터 뷰를 만들 수 있다.
-- 단순뷰, 복합뷰, 인라인뷰 (이름이 없는 뷰

create view v_emp
as
select ename, deptno
from t_emp;

-- view 조회하기
select * from v_emp;

-- 복합 뷰 만들기
select o.id, sum( o.sale_cnt * g.price )
from tbl_test_order o
join tbl_test_goods g
on o.pcode = g.pcode
group by o.id;

-- 고객 (이름)별 판매금액
create view v_order
as
select o.id, sum( o.sale_cnt * g.price ) as amt  
from tbl_test_order o
join tbl_test_goods g
on o.pcode = g.pcode
group by o.id;

select * from v_order;
select * from tbl_test_customer;
--


select *
from v_order vo
join tbl_test_customer tc
on vo.id=tc.id;

-- view 연습문제
-- 420 1번 view 문제

-- 420 페이지 연습문제 풀이
create or replace view v_prof_dept
as
    select p.profno "교수번호", p.name "교수명", d.dname "소속학과명"
    from professor p, department d
    where p.deptno = d.deptno;
    
select * from v_prof_dept;


--2.
select * from student;
select * from department;

--학과별로 최대키 최대몸무게 구하기
-- 이 내용을 인라인 뷰로 만들어서 사용해라 ( 서브쿼리로 사용하시오 )
select deptno1, max( height), max( weight)
from student
group by deptno1;

--완성된 쿼리
select d.dname, a.maxHeight, maxWeight
from (
select deptno1, max(height) maxHeight, max(weight) maxWeight
from student
group by deptno1 ) a
join department d
on a.deptno1 = d.deptno;


--3
select * from department;
select * from student;

select deptno1, height
from student;

select deptno1, max( height) maxHeight
from student
group by deptno1;


select d.dname, a.deptno1, a.maxHeight, s.name
from (
--학과별로 가장 키가 큰 학생 조회하기
select deptno1, max( height) maxHeight
from student
group by deptno1
)a
join student s
on a.deptno1 = s.deptno1 and a.maxHeight = s.height
join department d
on d.deptno = s.deptno1;

--2.학생테이블로 조인하여 해당하는 학생 이름이 조회되도록 하기

select * from student;
select studno, name, deptno1, height from student;

select deptno1, max(height) maxHeight
from student
group by deptno1;

select * from tbl_test_order;
select * from tbl_test_goods;

select *
from tbl_test_order o
join tbl_test;

--4번
--1) 학년별 평균 키 구하기
--2) 학생들에서 학년별 평균 키보다 큰 학생 조회
select * from student;

select grade, height from student;

select grade, avg(height)
from student
group by grade;

--위의 쿼리 (인라인 서브쿼리)로 만들어서 student 테이블과 조인해서 결과를 만들어야 한다
select s.grade, s.name, s.height, a.avgHeight
from (
select grade, avg(height)
from student
group by grade
)a
join student s
on a.grade = s.grade and s.height > a.avgHeight;



