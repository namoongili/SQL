
create table new_emp1 (
   no number(4) 
   constraint emp1_no_pk primary key,
   name varchar2(20) 
   constraint emp1_name_nn not null,
   jumin varchar2(13)
   constraint emp1_jumin_nn not null 
   constraint emp1_jumin_uk unique,
   loc_code number(1) 
   constraint emp1_area_ck check( loc_code  <5 ) ,
   deptno varchar2(6)
   constraint emp1_deptno_fk references dept2(dcode)
);



 

create table new_emp2(
    no number(4) primary key,
    name varchar2(20) not null ,
    jumin varchar2(13) not null unique,
    loc_code number(1) check( loc_code <5),
    deptno varchar2(6) references dept2(dcode )
);


-- 도메인 제약조건
-- 하나의 항목(컬럼, 속성, 필드)이 가질 수 있는 값의 범위
-- 필수여부 (not null : 필수) , 명시하지 않으면 null
-- default (기본값 설정) : 사용자가 값을 입력하지 않았을 때 기본으로 정해지는 값
-- check (체크제약조건) 점수항목에 100이하 값만 들어올 수 있게, 학년 항목에 1,2,3,4 학년에 들어갈 수 있게 할 수 있음

create table test_2021
 (
 id  varchar2(7) not null ,
 email varchar2(50) null ,
 phone char(13) not null, -- 필수(notnull이기 떄문)
pwd varchar2(7) default  '111'
 );
 
 --데이터 입력(삽입), insert 
 insert into test_2021(id,email,phone,pwd) values('test1', 'test@naver.com', '01012345678', '1234' );
 commit;
 
 select * from test_2021;
 
 insert into test_2021 (id, email) values ('test2', 'test2@naver.com);
 --NULL을 ("scott". "test_2021"."PHONE") 안에 삽입할 수 없습니다
 
 insert into test_2021 (id,email,phone) values ('test2', 'test2@naver.com', '01012341234');
 commit;
 
 
 --체크제약 조건
 create table test_2021_2
 (
 id varchar2(50) null ,
 phone varchar2(20) check (phone like  '010-%-____') not null ,
 email varchar2(50) null
 );
 
 insert into test_2021_2 (id, phone) values('test1','01012345678');
 commit;
 
 select * from test_2021_2;
 
 
--제약조건 위배 조건
--insert into test_2021_2 (id, phone) values('test2','01012345678');
--체크 제약조건이 위배되었습니다

create table test_2021_0
 (
 id  varchar2(50) not null,
 email varchar2(200) null ,
 phone char(13) not null, 
pwd varchar2(200) default  '111'  , 
grade CHAR(2) CHECK( grade  IN ('01', '02', '03')) 
);

insert into test_2021_0( id, email, phone, grade ) values('test1', 'test@naver.com', '01012345678');
commit;

select * from test_2021_0;

--오류발생 (grade항목에 대한 체크제약조건)

-- 엔티티제약조건 (하나의 테이블 안에서 가지는 제약조건)
-- primary key (not null + 중복허용하지 않음)
-- unique ( 중복허용하지 않음 )

create table test_2021_3
 (
 id  varchar2(7) not null primary key  ,
 email  varchar2(50)  ,
 phone char(13)  unique ,
 pwd   varchar2(10) 
);

insert into test_2021_3( id, email, phone, pwd ) values('test', 'test@naver.com', '010-1234-1234', '1234');
commit;

select * from test_2021_3;

--오류발생 전화번호가 유니크해야함 (중복되면 안됨)
--insert into test_2021_3 (id, email, phone, pwd) values('test2', 'test@naver.com', '010-1234-1234', '1234');
commit;

  insert into test_2021_3 (id, email, phone, pwd) values('test3', 'test@naver.com', '010-1234-1235', '1234');
  insert into test_2021_3 (id, email, phone, pwd) values('test4', 'test@naver.com', '010-1234-1236', '1234');
  insert into test_2021_3 (id, email, phone, pwd) values('test5', 'test@naver.com', '010-1234-1237', '1234');
 
--오류발생, 키로 설정된 항목은 반드시 입력되어야 하고(not null), 중복을 허용하지 않는다
--기존의 같은 아이디를 사용하기 때문이다
--무결성 제약 조건에 위배된다



--릴레이션 제약조건(관계제약조건: 테이블 간 제약조건)
create table mem_tbl (
id varchar2(5) not null primary key,
name varchar2(10) not null,
addr varchar2(10)
);

 insert into mem_tbl values( 'a1' ,  '홍길동' , '서울') ;
 insert into mem_tbl values( 'a2' ,  '홍길순', '부산');
 
 commit;
 
 create table ord_tbl (
 no varchar2(5)  not null primary key , 
qty number(4) ,
 cus_no  varchar2(5) 
);

 insert into ord_tbl values( 'j01' , 3, 'a1' );
 insert into ord_tbl values( 'j02' , 1, 'a1' );
 insert into ord_tbl values( 'j03' , 7, 'a2' ); 
 commit;

--고객정보 조회하기
select * from mem_tbl;
--주문정보 조회하기
select * from ord_tbl;

--이 데이터가 고객테이블에 없는 a3 고객으로 주문정보를 입력한다면
--입력되지 않기를 기대했으나 정상적으로 입력된다. (없는 고객이 주문을 발생시킨 데이터가 만들어진다 => 데이터 무결성에 문제가 생김)
insert into ord_tbl values('j04', 7, 'a3');


--위의 문제를 해결하기 위해서
--테이블 생성할 때 참조하는 항목에 대해서는 명시적으로 제약조건을 두어야 한다.

create table mem_tbl_2 (
 id varchar2(5)  not null primary key ,
 name varchar2(10) not null  , 
addr varchar2(10)
 );
 
 insert into mem_tbl values( 'a1' ,  '홍길동' , '서울') ;
 insert into mem_tbl values( 'a2' ,  '홍길순', '부산');
 
 
 --cascade
 --참조하는 테이블의 내용이 삭제될 때 함께 삭제가 된다. ( 즉 고객이 삭제가 될 때 고객을 참조하던 주문정보가 함께 삭제되게 한다 )
 
 create table ctbl ( id varchar2(10) primary key , name varchar2(10) )  ;
create table otbl ( code varchar2(10) primary key,  iid  varchar2(10) references ctbl (id) on delete cascade );

insert into ctbl values( 't1' ,  'kim');
insert into ctbl values( 't2'  , 'choi');
insert into otbl values( 'o1', 't1');
insert into otbl values( 'o2', 't1');
commit;

select * from ctb1;
select * from otb1;

delete from ctbl where id='t1';
    
    

create table ctbl2 ( id varchar2(10) primary key , name varchar2(10) )  ;
create table otbl2 ( code varchar2(10) primary key,  iid  varchar2(10) references ctbl2 (id) on delete set null );

insert into ctbl2 values( 't1' ,  'kim');
insert into ctbl2 values( 't2'  , 'choi');
insert into otbl2 values( 'o1', 't1');
insert into otbl2 values( 'o2', 't1');


commit;

select * from ctb12;
select * from otb12;

--nullfy 
--고객정보 삭제하기 't1'고객 삭제하기
--'t1'고객을 참조하는 값들이 null로 채워짐
delete from ctb12 where id = 't1';

--고객 테이블 만들기 (아이디 -키, 이름, 주소)
--주문 테이블 만들기 (주문번호 -키, 수량, 고객아이디 - 외래키 설정)

--1. 주문테이블에 없는 고객정보 입력하기 (x)
--2. 주문이 있는 고객정보 삭제하기 (x)